NOTATIONS:
** subtopic
--> points to that topic
=> meaning/answers/conclusions
-----------------division
***MAIN TOPIC***
$$$ COMMANDS
--------------------------------------------
Git and Github? The difference?

-> learn git-scm from git chapter 2 (2.1) on the website

**Git: 
-> Version Control System
-> Manage Source Code History
-> Runs, Local

**Github:
-> Hosting and Collaboration Provider
-> Git Repository Hosting
-> Runs, Web Based

Means => Git ---> push ---> Github 

Other examples: AWS code commit
----------------------------------------------
***GIT***
3 important keywords: Repositories, Branches and Commits

1.Repository:
-> The location where your code history is stored

2.Branch:
-> "Folder" within the Repository containing Commits
-> Not exactly Folder

3.Commits:
Different stages of your code inside a Branch

---Download git from git-scm.com---

Git does not come with any interface, only command based.
-------------------------------------------------------

$$$ git config --global user.email "email_id@abc.com"
$$$ git config --global user.name "your_name"
-> to login into git locally

$$$ git init
-> initialize the git repo and begins managing the Folder
-> it's a hidden folder and Local

$$$ git status
-> gives status, shows tracked and untracked files

$$$ git add .
-> adds the file for tracking
-> . means all files

$$$ git commit -m "commit name"
-> adds the version of the code
-> all commits to be named

$$$ git log 
-> show log of all commits

$$$ git branch 
-> shows all the Branches

$$$ git checkout unique_id
-> to go at particular commit or stage of the file

$$$ git master /OR/ git checkout master
-> going back to master from last checkout

$$$ git reset --hard unique_id
-> to delete a particular commit or code 

$$$ git checkout -- .
-> you did something wrong
-> now want to go back to previous code 
-> that is you can delete the unstaged commit

**what about branches?
-> suppose you website is already in the market and you want try out some new feature
-> how can you do it without crashing the website
-> how experiment this new code
-> well you can create new branch for it and try out some experiments 
-> multiple coder can have different branches and they can try out there logics
-> when it is done so you can merge the brancj in to master

$$$ git checkout -b branch_name
-> New branch is created and switched to it
-> the new branch will include all the commits from master branch

$$$ git merge branch_name
-> merges the branch to masterq

$$$ git branch -D branch_name
-> to delete a branch
-> carefula and do it after merging 

**Git can also identify conflicts.
-------------------------------------------------
****GITHUB****
